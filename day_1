Global:

	default config path: engine/Shopware/Configs/Default.php
	plugin requs: $this->assertRequiredPluginsPresent(array('plugin_id1','plugin_id2'))
	Events sind besser als Hooks

usefull cionfig settings:

'front' => array(
        'noErrorHandler' => true,
        'throwExceptions' => true,

    ),
    'template' => array(
        'forceCompile' => true
    );

Notes: 
	Plugins:
		Wenn keine update function in der Bootstrap vorhanden ist wird automatisch die install methode gecalled
		Tempalte Vars können über ->View()->assign('foo','bar') oder magic setter zugewiesen werdeb ->View()->foo = bar
		Vor dem call der Action wird preDispatch ausgeführt
		Nach dem call der Action wird die postDispatch ausgeführt
		Module in Shopware sind die Controllertypen (API, Frontend, Backend, Widget)

	Events:
		subscribeEvent(Event, Callback, position)  // zuerst negativer Wert // zuletzt positiver Wert
		Der wiki Eintrag zu den Events wird nicht mehr gepflegt!
		Types:
			Notify: rein informativ
			NotifyUntil: informiert über daten und bricht bei !null return value den prozess ab
			Filter: wird zur manipulation der Daten benutzt
	Hooks:
		Hooks bekommen als Event args den Typ Enlight_Hook_HookArgs
		Scheinbar ist jede Klasse hoookable
		Types:
			before: wird zuvor ausgeführt
			after: wird danach ausgeführt
			replace: ersetzt eine ganze Methode

	API:
		?useNumberAsId=1&pretty=1 
		updates sind incrementell
		Bei eigenen Resourcen, den Shopware Pagintor verwenden anastatt des Doctrine Defaults (Fehlverhalten bei der Variantentiefe)

	Backend & ExtJs:
		Alle extJs Dateien, werden durch smarty geparsed!
		Controller angaben, werden immer lowercase geschrieben.
		In den JS files muss zwischen { und Zeichen immer ein Leerzeichen sein, sonst knallt es mit smarty
		Smartyblöcke in der js Datei verwenden um das Js file erweiterbar zu halten
		Icons in den Menü werden über die CSS Klassen gesteuert
		Dropdowns müssen über eigene Stores erstellt werden, diese werden dann in der Felddefinition überschrieben
		Die Shopware Basis BackendModules liegen unter themes/Backend/ExtJs/backend/base/application
